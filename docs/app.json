[{"name":"app.R","content":"library(shiny)\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# Constants\nCSV_FILE <- \"fuel.csv\"\nCOL_TYPES <- cols(\n    date = col_date(),\n    .default = col_double()\n)\n\n# Function to initialize the CSV file\ninitialize_csv <- function() {\n    if (!file.exists(CSV_FILE)) {\n        df <- data.frame(matrix(ncol = 6, nrow = 0))\n        colnames(df) <- c(\"date\", \"price_per_gallon\", \"gallons\", \"total\", \"mileage_in\", \"mpg\")\n        write_csv(df, CSV_FILE)\n    }\n}\n\n# Function to add an entry to the CSV file\nadd_entry <- function(date, price_per_gallon, gallons, mileage_in) {\n    df <- read_csv(CSV_FILE, col_types = COL_TYPES)\n    \n    # Calculate the total cost\n    total <- round(as.numeric(price_per_gallon) * as.numeric(gallons), 2)\n    \n    # Calculate MPG\n    if (nrow(df) > 0) {\n        last_entry <- tail(df, 1)\n        mileage_diff <- mileage_in - last_entry$mileage_in\n        mpg <- ifelse(gallons != 0, round(mileage_diff / gallons, 3), 0)\n    } else {\n        mpg <- 0\n    }\n    \n    new_entry <- data.frame(\n        date = date,\n        price_per_gallon = as.numeric(price_per_gallon),\n        gallons = as.numeric(gallons),\n        total = total,\n        mileage_in = as.numeric(mileage_in),\n        mpg = mpg\n    )\n    \n    df <- bind_rows(df, new_entry)\n    write_csv(df, CSV_FILE)\n}\n\n# Function to plot MPG and Price per Gallon over time\nplot_mpg_chart <- function() {\n    if (!file.exists(CSV_FILE)) {\n        return(ggplot() + annotate(\"text\", x = 0.5, y = 0.5, label = \"No data available (CSV file missing)\", size = 6, color = \"red\") + theme_void())\n    }\n    \n    df <- tryCatch({\n        read_csv(CSV_FILE, col_types = COL_TYPES)\n    }, error = function(e) {\n        return(NULL)\n    })\n    \n    if (is.null(df)) {\n        return(ggplot() + annotate(\"text\", x = 0.5, y = 0.5, label = \"No data available (CSV file empty)\", size = 6, color = \"red\") + theme_void())\n    }\n    \n    df <- df %>%\n        arrange(date)\n    \n    if (all(is.na(df$mpg)) || all(is.na(df$price_per_gallon))) {\n        return(ggplot() + annotate(\"text\", x = 0.5, y = 0.5, label = \"No valid data to plot\", size = 6, color = \"red\") + theme_void())\n    }\n    \n    p <- ggplot() +\n        geom_line(data = df, aes(x = date, y = mpg, color = \"MPG\"), linewidth = 1) +\n        geom_line(data = df, aes(x = date, y = price_per_gallon * 10, color = \"Price per Gallon\"), linetype = \"dashed\", linewidth = 1) +\n        scale_y_continuous(\n            name = \"MPG\",\n            sec.axis = sec_axis(~./10, name = \"Price per Gallon ($)\")\n        ) +\n        labs(title = \"MPG and Price per Gallon Over Time\", x = \"Date\") +\n        scale_color_manual(name = \"Legend\", values = c(\"MPG\" = \"blue\", \"Price per Gallon\" = \"green\")) +\n        theme_minimal() +\n        theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    return(p)\n}\n\n# Shiny UI\nui <- fluidPage(\n    titlePanel(\"Fuel Data Tracker\"),\n    \n    sidebarLayout(\n        sidebarPanel(\n            dateInput(\"date\", \"Date:\", value = Sys.Date()),\n            numericInput(\"price_per_gallon\", \"Price per Gallon ($):\", value = 3.00, min = 0, step = 0.01),\n            numericInput(\"gallons\", \"Gallons:\", value = 10, min = 0, step = 0.1),\n            numericInput(\"mileage_in\", \"Mileage In:\", value = 100000, min = 0, step = 1),\n            actionButton(\"add_entry\", \"Add Entry\")\n        ),\n        \n        mainPanel(\n            plotOutput(\"mpgPlot\")\n        )\n    )\n)\n\n# Shiny Server\nserver <- function(input, output, session) {\n    # Initialize the CSV when the app starts\n    initialize_csv()\n    \n    # Reactive value to track when data is updated\n    reactive_data <- reactive({\n        invalidateLater(5000, session)  # Refresh every 5 seconds\n        read_csv(CSV_FILE, col_types = COL_TYPES)\n    })\n    \n    observeEvent(input$add_entry, {\n        # Add the entry when the button is clicked\n        add_entry(input$date, input$price_per_gallon, input$gallons, input$mileage_in)\n        showNotification(\"Entry added successfully\", type = \"message\")\n    })\n    \n    output$mpgPlot <- renderPlot({\n        # Render the MPG and Price per Gallon chart\n        df <- reactive_data()\n        plot_mpg_chart()\n    })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"fuel.csv","content":"date,price_per_gallon,gallons,total,mileage_in,mpg\n2024-08-06,3.279,7.492,24.57,104204,0\n2024-08-24,3.129,8.415,26.33,104395,22.698\n","type":"text"}]
